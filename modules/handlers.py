from telebot import types
from modules.states import UserStates
from modules.common import is_user_allowed
from modules.commands import generate_configuration, send_configuration_files

def create_menu_keyboard() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    return:
        types.ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.
    """
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["NAME", "IP", "DATE", "COMMENT", "CLEAR", "SHOW", "CREATE"]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    menu.add(*[types.KeyboardButton(button) for button in buttons])

    return menu

def setup_handlers(bot, user_states):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞.
    """
    menu_keyboard = create_menu_keyboard()

    @bot.message_handler(commands=['start'])
    def start(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        """
        if not is_user_allowed(message.chat.id):
            send_access_denied_message(bot, message)
            return
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã", reply_markup=menu_keyboard)

    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        chat_id = message.chat.id

        if not is_user_allowed(chat_id):
            return

        if message.text in ["NAME", "IP", "DATE", "COMMENT"]:
            handle_input_request(bot, chat_id, message.text, user_states, menu_keyboard)
        elif message.text == "SHOW":
            handle_show_request(bot, chat_id, user_states, menu_keyboard)
        elif message.text == "CLEAR":
            handle_clear_request(bot, chat_id, user_states, menu_keyboard)
        elif message.text == "CREATE":
            handle_create_request(bot, chat_id, user_states, menu_keyboard)
        else:
            handle_user_input(bot, chat_id, message.text, user_states, menu_keyboard)

def send_access_denied_message(bot, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞.
    """
    bot.send_message(
        message.chat.id,
        text="üíÄüíÄüíÄüíÄ\nuser - {0.username}\nid - {0.id}\n{0.first_name} {0.last_name}\nNo rule\nüíÄüíÄüíÄüíÄ".format(message.from_user)
    )

def handle_input_request(bot, chat_id, input_type, user_states, menu_keyboard):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.
    """
    prompts = {
        "NAME": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        "IP": "–í–≤–µ–¥–∏—Ç–µ IP –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        "DATE": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏",
        "COMMENT": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    }
    bot.send_message(chat_id, prompts[input_type], reply_markup=menu_keyboard)
    user_states.set_user_state(chat_id, f"waiting_for_{input_type.lower()}_input")

def handle_show_request(bot, chat_id, user_states, menu_keyboard):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    user_data = user_states.get_user_data(chat_id)

    response = (
        f"–í—ã –≤–≤–µ–ª–∏:\n"
        f"–ò–º—è: {user_data.get('name', '')}\n"
        f"IP: {user_data.get('ip', '')}\n"
        f"–î–∞—Ç–∞: {user_data.get('date', '')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data.get('comment', '')}"
    )
    bot.send_message(chat_id, response, reply_markup=menu_keyboard)

def handle_clear_request(bot, chat_id, user_states, menu_keyboard):
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_states.clear_user_data(chat_id)
    user_states.clear_user_state(chat_id)
    bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.", reply_markup=menu_keyboard)

def handle_create_request(bot, chat_id, user_states, menu_keyboard):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã.
    """
    user_data = user_states.get_user_data(chat_id)
    usr_name = user_data.get('name', '')
    usr_ip = user_data.get('ip', '')
    usr_comment = user_data.get('comment', '')
    usr_date = user_data.get('date', '')
    if not user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=menu_keyboard)
        return

    try:
        config_path, qr_path = generate_configuration(usr_name, usr_ip, usr_comment)
        send_configuration_files(bot, chat_id, config_path, qr_path)
        bot.send_message(chat_id, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=menu_keyboard)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}", reply_markup=menu_keyboard)

def handle_user_input(bot, chat_id, text, user_states, menu_keyboard):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    state = user_states.get_user_state(chat_id)
    if state:
        key = state.replace("waiting_for_", "").replace("_input", "")
        user_states.update_user_data(chat_id, key, text)
        bot.send_message(chat_id, f"{key.capitalize().lower()} '{text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=menu_keyboard)
        user_states.clear_user_state(chat_id)